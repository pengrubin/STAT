#          first attempt because we
#          haven't defined U yet)
iter <- 0                       #          Initialise iteration count
while(abs(U) > 1e-6) {
eta <- as.vector(X%*%betahat) # Step 3:  calculate linear
mu <- exp(eta)                #          predictors, means
V <- mu                       #          and variances
W <- (mu^2)/V                 # Step 4:  diagonal elements of W
z <- eta + ( (y-mu)/mu )      # Step 5:  adjusted dependent variate
XW <- t(W*X)                  # Step 6:  calculation of X'W
#          (uses elementwise
#          multiplication, exploiting
#          the fact that W will be
#          recycled to match the number
#          of elements in X)
XWX <- solve(XW%*%X)          # Step 7:  calculation of [X'WX]^-1,
XWz <- XW%*%z                 #          X'Wz and U
U <- XW%*%(z-eta)
cat(paste("Iteration",iter,   #          Output current values to
" Estimate",        #          screen (rounded to a
round(betahat,6),   #          sensible number of decimal
" Score",           #          places)
round(U,8),"\n"))   #
betahat <- XWX%*%XWz          # Step 8:  update betahat, and go back
iter <- iter + 1              #          if necessary
}
phi <- 1                        # Step 9:  not strictly necessary here
beta.se <- sqrt(diag(XWX))      # Step 10: calculate standard errors
mle.table <-
data.frame(Estimate=betahat,  # Step 11: assemble results into a
S.E.=beta.se,      #          data frame, and return
T=betahat/beta.se) #
mle.table
}
beta <- seq(3,3.6,0.01)
logl.beta <- vector("numeric",length(beta))
#
# Evaluate the log-likelihood, score and information functions
# for each value of beta. We can’t easily avoid a loop for the
# log-likelihood, but the other 2 functions can each be
# evaluated in a single vector operation (which is more efficient)
#
for (i in 1:length(beta)) {
logl.beta[i] <- sum(log(dpois(storm.data$Storms,exp(beta[i]))))
}
n <- length(storm.data$Storms)
storm.data <- read.csv("/Users/hongwei/Desktop/nstorms.dat.txt")
#
# Evaluate the log-likelihood, score and information functions
# for each value of beta. We can’t easily avoid a loop for the
# log-likelihood, but the other 2 functions can each be
# evaluated in a single vector operation (which is more efficient)
#
for (i in 1:length(beta)) {
logl.beta[i] <- sum(log(dpois(storm.data$Storms,exp(beta[i]))))
}
View(storm.data)
storm.data <- read.csv("/Users/hongwei/Desktop/nstorms.dat.txt",sep=" ")
#
# Evaluate the log-likelihood, score and information functions
# for each value of beta. We can’t easily avoid a loop for the
# log-likelihood, but the other 2 functions can each be
# evaluated in a single vector operation (which is more efficient)
#
for (i in 1:length(beta)) {
logl.beta[i] <- sum(log(dpois(storm.data$Storms,exp(beta[i]))))
}
n <- length(storm.data$Storms)
ysum <- sum(storm.data$Storms)
u.beta <- DEFINE THE SCORE FUNCTION HERE (FORMULA IS GIVEN ABOVE)
i.beta <- DEFINE THE INFORMATION FUNCTION HERE (       "       )
#
# Set up a graphics screen with space for 3 plots, and plot.
source("/Users/hongwei/Documents/GitHub/STAT/pjnfunctions.R")
source("/Users/hongwei/Documents/GitHub/STAT/pjnfunctions.R")
source("/Users/hongwei/Documents/GitHub/STAT/STAT0017_Practical_2/pjnfunctions.R")
source("/Users/hongwei/Documents/GitHub/STAT/STAT0017_Practical_2/pjnfunctions.R")
install.packages("devtools")
library("devtools")
install_github("ConstantianosChr/exdex")
library("devtools")
install_github("ConstantianosChr/exdex")
install_github("ConstantinosChr/exdex")
View(gev.cdf)
library(ismev)
data(dowjones)
install.packages("ismev")
install.packages("dowjones")
library(ismev)
data(dowjones)
?dowjones  # in ismev
DJ <- dowjones[,2]                                  # Dow Jones index
t <- (dowjones[,1]-dowjones[1,1])/(3600*24*365)     # time in years
View(dowjones)
t
plot(t+1996,DJ,xlab="years",ylab="Dow Jones index") # TS plot
DJ.ret <- -100*diff(log(DJ)) # negated % daily log-returns (so large values
# correspond to big falls in the index)
t <- t[-1]
plot(t+1996,DJ.ret,xlab="years",ylab="% daily losses") # variability increases over time?
library(evd)
install.packages("evd")
library(evd)
par(mfrow=c(1,1))
evd::mrlplot(DJ.ret)
tlim <- c(-1,3)
evd::mrlplot(DJ.ret,tlim)
tlim <- quantile(DJ.ret,probs=c(0.1,0.99))  # try changing the probs argument
# [tcplot in evd is an alternative to gpd.fitrange in ismev.]
tcplot(DJ.ret,tlim)
u <- 0.5                # pick a threshold
p.u <- mean(DJ.ret > u) # prob of exceedance
fit <- fpot(DJ.ret,threshold=u)  # evd alternatives to ismev's gpd.fit and gpd.diag
fit
par(mfrow=c(2,2))
plot(fit)
x(11)
x()
x11
library(ismev)
data(dowjones)
?dowjones  # in ismev
DJ <- dowjones[,2]                                  # Dow Jones index
t <- (dowjones[,1]-dowjones[1,1])/(3600*24*365)     # time in years
plot(t+1996,DJ,xlab="years",ylab="Dow Jones index") # TS plot
DJ.ret <- -100*diff(log(DJ)) # negated % daily log-returns (so large values
# correspond to big falls in the index)
t <- t[-1]
plot(t+1996,DJ.ret,xlab="years",ylab="% daily losses") # variability increases over time?
plot(t+1996,DJ.ret,xlab="years",ylab="% daily losses") # variability increases over time?
plot(t+1996,DJ.ret,xlab="years",ylab="% daily losses") # variability increases over time?
library(evd)
par(mfrow=c(1,1))
evd::mrlplot(DJ.ret)
tlim <- c(-1,3)
evd::mrlplot(DJ.ret,tlim)
tlim <- quantile(DJ.ret,probs=c(0.1,0.99))  # try changing the probs argument
# [tcplot in evd is an alternative to gpd.fitrange in ismev.]
tcplot(DJ.ret,tlim)
u <- 0.5                # pick a threshold
p.u <- mean(DJ.ret > u) # prob of exceedance
fit <- fpot(DJ.ret,threshold=u)  # evd alternatives to ismev's gpd.fit and gpd.diag
fit
par(mfrow=c(2,2))
plot(fit)
?plot.uvevd  # in evd
par(mfrow=c(2,2))
plot(fit)
?plot.uvevd  # in evd
par(mfrow=c(2,1)) # Profile log-likelihoods
plot(profile(fit))
plot(profile(fit))
fit.ismev <- gpd.fit(DJ.ret,threshold=u)
gpd.diag(fit.ismev)
gpd.diag(fit.ismev)
fit.ismev <- gpd.fit(DJ.ret,threshold=u)
gpd.diag(fit.ismev)
fit.ismev <- gpd.fit(DJ.ret,threshold=u)
gpd.diag(fit.ismev)
ydat <- matrix(t,ncol=1)
# sigma.u linear in time
fit.year <- gpd.fit(DJ.ret,threshold=u,ydat=ydat,sigl=1)
# ln(sigma.u) linear in time
fit.year <- gpd.fit(DJ.ret,threshold=u,ydat=ydat,sigl=1,siglink=exp)
gpd.diag(fit.year)                                       # constant threshold u
# Likelihood ratio test
pchisq(2*(fit.ismev$nllh-fit.year$nllh),1,lower.tail=F) # p-value
library(quantreg)
rq.thresh <- rq(DJ.ret ~ t, tau = 1 - p.u) # quantile regression
u.t <- fitted(rq.thresh)            # threshold
plot(t+1996,DJ.ret,xlab="years",ylab="% daily losses") # variability increases over time?
lines(t+1996,u.t,col="red",lwd=2)
fit.pp <- pjn.pp.fit(DJ.ret,threshold=u.t)
np1 <- length(fit.pp$mle)
fit.mu <- pjn.pp.fit(DJ.ret,threshold=u.t,ydat=ydat,mul=1)
np2 <- length(fit.mu$mle)
fit.sig <- pjn.pp.fit(DJ.ret,threshold=u.t,ydat=ydat,sigl=1)
np3 <- length(fit.sig$mle)
fit.musig <- pjn.pp.fit(DJ.ret,threshold=u.t,ydat=ydat,mul=1,sigl=1)
np4 <- length(fit.musig$mle)
nllhs <- c(fit.pp$nllh,fit.mu$nllh,fit.sig$nllh,fit.musig$nllh)
npars <- c(np1,np2,np3,np4)
cbind(nllhs,npars)
pp.diag(fit.mu) # diagnostic plots
library(ismev)
data(fremantle) # See page 111 of Coles (2001)
?fremantle # in ismev
plot(fremantle[,1],fremantle[,2],pch=16,xlab="year",ylab="sea level (m)")
plot(fremantle[,3],fremantle[,2],pch=16,xlab="SOI",ylab="sea level (m)")
?fremantle # in ismev
plot(fremantle[,1],fremantle[,2],pch=16,xlab="year",ylab="sea level (m)")
plot(fremantle[,3],fremantle[,2],pch=16,xlab="SOI",ylab="sea level (m)")
fit0 <- gev.fit(fremantle[,2])                  # no covariates
gev.diag(fit0)                                  # model diagnostics
ydat <- fremantle[,c(1,3)]                      # year in column 1, SOI in column 2
## Install CDVine package (and others)
install.packages("CDVine")
library("CDVine")
install.packages("gridExtra","ggplot2")
library("gridExtra")
library("ggplot2")
opar <- par("mfrow","mar")
opar <- par("mfrow","mar")
# simulate from a bivariate Gaussian copula, rho=0.3
simdata1 = BiCopSim(1000,1,0.3,par2=0)
plot(simdata1, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.3")), font.main=1)
View(simdata1)
View(simdata1)
# simulate from a bivariate Gaussian copula, rho=0.7
simdata2 = BiCopSim(1000,1,0.7,par2=0)
plot(simdata2, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.7")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.9
simdata3 = BiCopSim(1000,1,0.9,par2=0)
plot(simdata3, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.9")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.99999
simdata4 = BiCopSim(1000,1,0.99999,par2=0)
plot(simdata4, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.99999")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.9
simdata3 = BiCopSim(1000,1,0.9,par2=0)
plot(simdata3, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.9")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.99999
simdata4 = BiCopSim(1000,1,0.99999,par2=0)
plot(simdata4, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.99999")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=1, i.e. comonotonicity copula
u = runif(1000)
simdata5=cbind(u,u)
plot(simdata5, pch=1, cex=0.8,xlab= "u",col.lab="red",ylab= "u",main=expression(paste("Gaussian copula, ",rho,"=1, (comonotonicity)")), font.main=1)
par(mfrow=c(2,2))
plot(simdata1, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.3")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata2, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.7")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata3, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.9")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata4, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.99999")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
par(opar)
par(mfrow=c(2,2))
plot(simdata1, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.3")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata2, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.7")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata3, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.9")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata4, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.99999")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
par(opar)
### See what happens if you specify a value outside the parameter space
BiCopSim(1000,1,2,par2=0)
# simulate from a bivariate Gaussian copula, rho=-0.3
simdata6 = BiCopSim(1000,1,-0.3,par2=0)
plot(simdata6, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.3")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
# simulate from a bivariate Gaussian copula, rho=-0.7
simdata7 = BiCopSim(1000,1,-0.7,par2=0)
plot(simdata7, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.7")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
# simulate from a bivariate Gaussian copula, rho=-0.9
simdata8 = BiCopSim(1000,1,-0.9,par2=0)
plot(simdata8, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.9")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
# simulate from a bivariate Gaussian copula, rho=-0.99999
simdata9 = BiCopSim(1000,1,-0.99999,par2=0)
plot(simdata9, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"= -0.99999")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
# simulate from a bivariate Gaussian copula, rho=-1, i.e. countermonotonicity copula
u = runif(1000)
simdata10=cbind(u,1-u)
plot(simdata10, pch=1, cex=0.7,xlab= "u", col.main="blue", col.lab="red", ylab= "1-u",main=expression(paste("Gaussian copula, ",rho,"=-1, (countermonotonicity)")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
par(mfrow=c(2,2))
plot(simdata6, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.3")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata7, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.7")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata8, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-0.9")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata9, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"= -0.99999")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
par(opar)
# simulate from a bivariate Gaussian copula, rho=0, i.e. independence copula
u1 = runif(1000)
u2 = runif(1000)
simdata11=cbind(u1,u2)
plot(simdata11, pch=1, cex=0.7,xlab= "u", col.main="blue", col.lab="red", ylab= "1-u",main=expression(paste("Gaussian copula, ",rho,"= 0, (independence)")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
par(mfrow=c(1,3),mar=c(8,2,8,2))
plot(simdata5, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=1, (comonotonicity)")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata11, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0, (independence)")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
plot(simdata10, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=-1, (countermonotonicity)")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
zz=data.frame(simdata1)
rownames(zz)<-NULL
colnames(zz)<-c("u1", "u2")
p1=ggplot(zz, aes(u1,  u2)) +
geom_point(size=1.8,pch=1)+guides(alpha=FALSE)+
theme_minimal()+
ggtitle(expression(paste("Gaussian copula, ",rho," = 0.3")))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),text=element_text(size=14),
plot.title = element_text(color="blue", size=14, face="bold.italic",hjust = 0.5),
axis.title.x = element_text(color="red", size=14, face="bold"),
axis.title.y = element_text(color="red", size=14, face="bold")
)+
scale_x_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2)) +
scale_y_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2))
p1
zz=data.frame(simdata2)
rownames(zz)<-NULL
colnames(zz)<-c("u1", "u2")
p2=ggplot(zz, aes(u1,  u2)) +
geom_point(size=1.8,pch=1)+guides(alpha=FALSE)+
theme_minimal()+
ggtitle(expression(paste("Gaussian copula, ",rho," = 0.7")))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),text=element_text(size=14),
plot.title = element_text(color="blue", size=14, face="bold.italic",hjust = 0.5),
axis.title.x = element_text(color="red", size=14, face="bold"),
axis.title.y = element_text(color="red", size=14, face="bold")
)+
scale_x_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2)) +
scale_y_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2))
p2
zz=data.frame(simdata3)
rownames(zz)<-NULL
colnames(zz)<-c("u1", "u2")
p3=ggplot(zz, aes(u1,  u2)) +
geom_point(size=1.8,pch=1)+guides(alpha=FALSE)+
theme_minimal()+
ggtitle(expression(paste("Gaussian copula, ",rho," = 0.9")))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),text=element_text(size=14),
plot.title = element_text(color="blue", size=14, face="bold.italic",hjust = 0.5),
axis.title.x = element_text(color="red", size=14, face="bold"),
axis.title.y = element_text(color="red", size=14, face="bold")
)+
scale_x_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2)) +
scale_y_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2))
p3
zz=data.frame(simdata4)
rownames(zz)<-NULL
colnames(zz)<-c("u1", "u2")
p4=ggplot(zz, aes(u1,  u2)) +
geom_point(size=1.8,pch=1)+guides(alpha=FALSE)+
theme_minimal()+
ggtitle(expression(paste("Gaussian copula, ",rho," = 0.99999")))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),text=element_text(size=14),
plot.title = element_text(color="blue", size=14, face="bold.italic",hjust = 0.5),
axis.title.x = element_text(color="red", size=14, face="bold"),
axis.title.y = element_text(color="red", size=14, face="bold")
)+
scale_x_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2)) +
scale_y_continuous(limits = c(0,1), expand = c(0, 0),breaks=seq(0,1,0.2))
p4
grid.arrange(p1,p2,p3,p4, ncol=2)
################## simulate from a bivariate t-copula ###############
#####################################################################
# simulate from a bivariate t copula, rho=0.7, v=3
simdata12 = BiCopSim(1000,2,0.7,par2=3)
plot(simdata12, pch=1, cex=0.8, xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 3")), font.main=1)
# simulate from a bivariate t copula, rho=0.7, v=10
simdata13 = BiCopSim(1000,2,0.7,par2=10)
plot(simdata13, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 10")), font.main=1)
# simulate from a bivariate t copula, rho=0.7, v=30
simdata14 = BiCopSim(1000,2,0.7,par2=30)
plot(simdata14, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 30")), font.main=1)
# simulate from a bivariate t copula, rho=0.7, v=90
simdata15 = BiCopSim(1000,2,0.7,par2=90)
plot(simdata15, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 90")), font.main=1)
# simulate from a bivariate t copula, rho=0.99999, v=3
set.seed(12121)
simdata16 = BiCopSim(1000,2,0.99999,par2=2.1)
plot(simdata16, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.99999, ",nu," = 2.1")), font.main=1)
# simulate from a bivariate t copula, rho=0.99999, v=90 i.e. comonotonicity copula
set.seed(12121)
simdata17 = BiCopSim(1000,2,0.99999,par2=90)
plot(simdata17, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.99999, ",nu," = 90")), font.main=1)
par(mfrow=c(2,2))
plot(simdata12, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 3")), font.main=1)
plot(simdata13, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 10")), font.main=1)
plot(simdata14, pch=1, cex=0.8,xlab= "u1",col.main="blue", col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 30")), font.main=1)
plot(simdata15, pch=1, cex=0.8,xlab= "u1",col.main="blue", col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 90")), font.main=1)
par(opar)
par(mfrow=c(2,2))
plot(simdata12, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 3")), font.main=1)
plot(simdata13, pch=1, cex=0.8,xlab= "u1",col.main="blue",col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 10")), font.main=1)
plot(simdata14, pch=1, cex=0.8,xlab= "u1",col.main="blue", col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 30")), font.main=1)
plot(simdata15, pch=1, cex=0.8,xlab= "u1",col.main="blue", col.lab="red",ylab= "u2",main=expression(paste("t copula, ",rho,"= 0.7, ",nu," = 90")), font.main=1)
par(opar)
par(mfrow=c(1,2))
rawdata <- read.table("/Users/hongwei/Documents/GitHub/STAT/STAT0030_Lab9_GLMs/nino3.dat")
rawdata <- read.table("/Users/hongwei/Documents/GitHub/STAT/STAT0030_Lab9_GLMs/nino3.dat")
View(rawdata)
rawdata <- read.table("/Users/hongwei/Documents/GitHub/STAT/STAT0030_Lab9_GLMs/nino3.dat",header = TRUE)
View(rawdata)
gamma.glm <- glm(y ~ x1 + x2, family=Gamma, data=mydataframe)
mydataframe <- read.table("/Users/hongwei/Documents/GitHub/STAT/STAT0030_Lab9_GLMs/nino3.dat",header = TRUE)
gamma.glm <- glm(y ~ x1 + x2, family=Gamma, data=mydataframe)
data <- scan(file="data1.txt")
##### Ignore these 2 commands if data "USAccDeaths" are already into your R system
setwd("/Users/hongwei/Documents/GitHub/STAT/STAT0010_Workshop")
data <- scan(file="data1.txt")
USAccDeaths <- ts(data, freq=12, start=c(1973,1))
##### Ignore these 2 commands if data "USAccDeaths" are already into your R system
setwd("/Users/hongwei/Documents/GitHub/STAT/STAT0010_Workshop")
data <- scan(file="data1.txt")
USAccDeaths <- ts(data, freq=12, start=c(1973,1))
data
USAccDeaths
plot(USAccDeaths,type="l")
diff1 <- diff(as.vector(USAccDeaths), lag=12)
diff2 <- diff(diff1, lag=1)
par(mfrow=c(2,1))
acf(diff2, lag = 26); pacf(diff2, lag = 26)
acf(diff2, lag = 26); pacf(diff2, lag = 26)
par(mfrow=c(2,1))
acf(diff2, lag = 26); pacf(diff2, lag = 26)
acf(diff2, lag = 26); pacf(diff2, lag = 26)
plot(USAccDeaths,type="l")
diff1 <- diff(as.vector(USAccDeaths), lag=12)
diff2 <- diff(diff1, lag=1)
par(mfrow=c(2,1))
acf(diff2, lag = 26); pacf(diff2, lag = 26)
fit1 <- arima(data, order = c(0,1,1), seasonal = list(order = c(0,1,1), period=12))
fit2 <- arima(data, order = c(0,1,1), seasonal = list(order = c(1,1,0), period=12))
fit1; fit2
fit1
order = c(0, 1, 1), period = 12)
list(order = c(0, 1, 1), period = 12)
fit1 <- arima(data, order = c(0,1,1), seasonal = list(order = c(0,1,2), period=12))
fit1
fit1 <- arima(data, order = c(0,1,1), seasonal = list(order = c(1,1,2), period=12))
fit1
fit1 <- arima(data, order = c(0,1,1), seasonal = list(order = c(0,1,1), period=12))
fit2 <- arima(data, order = c(0,1,1), seasonal = list(order = c(1,1,0), period=12))
fit1; fit2
acf( fit1$residuals, lag=26 ); pacf( fit1$residuals, lag=26  )
acf( fit2$residuals, lag=26 ); pacf( fit2$residuals, lag=26  )
fit2$residuals
par(mfrow = c(1,1))
fit1.for <- predict(fit1, n.ahead = 12)
plot(data, type="l", xlim=c(0,86), ylim=c(6500, 12500), ylab="USAccDeaths")
lines( fit1.for$pred, lty=5, pch=18, lwd=1, type="b")
fit1.for
plot(data, type="l", xlim=c(0,86), ylim=c(6500, 12500), ylab="USAccDeaths")
lines( fit1.for$pred, lty=5, pch=18, lwd=1, type="b")
lines( fit1.for$pred + 1.96*fit1.for$se, lty=2, pch=20, lwd=1, type="l")
lines( fit1.for$pred - 1.96*fit1.for$se, lty=2, pch=20, lwd=1, type="l")
Y3 = as.matrix( read.table(file="series3.dat")) ### ARMA(3,1)
plot(Y3, type="l")
plot(Y3, type="l", xlim=c(0,180), ylim = c(-50,50))
plot(Y3, type="l")
plot(Y3, type="l", xlim=c(0,180), ylim = c(-50,50))
fit3 <- arima(Y3, order = c(3,0,1))
fit3.f <- predict(fit3, n.ahead = 24)
lines( fit3.f$pred, lty=5, pch=18, lwd=1, type="b")
fit1 <- arima(data, order = c(3,1,2), seasonal = list(order = c(2,1,1), period=12))
fit1
# uniform data
data(worldindices)
install.packages("CDVine", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
# uniform data
data(worldindices)
## Install CDVine package (and others)
install.packages("CDVine")
library("CDVine")
install.packages("gridExtra","ggplot2")
data(worldindices)
library("gridExtra")
library("ggplot2")
opar <- par("mfrow","mar")
opar <- par("mfrow","mar")
# simulate from a bivariate Gaussian copula, rho=0.3
simdata1 = BiCopSim(1000,1,0.3,par2=0)
plot(simdata1, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.3")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.7
simdata2 = BiCopSim(1000,1,0.7,par2=0)
plot(simdata2, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.7")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.9
simdata3 = BiCopSim(1000,1,0.9,par2=0)
plot(simdata3, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.9")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=0.99999
simdata4 = BiCopSim(1000,1,0.99999,par2=0)
plot(simdata4, pch=1, cex=0.8,xlab= "u1",col.lab="red",ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.99999")), font.main=1)
# simulate from a bivariate Gaussian copula, rho=1, i.e. comonotonicity copula
u = runif(1000)
simdata5=cbind(u,u)
plot(simdata5, pch=1, cex=0.8,xlab= "u",col.lab="red",ylab= "u",main=expression(paste("Gaussian copula, ",rho,"=1, (comonotonicity)")), font.main=1)
par(mfrow=c(2,2))
plot(simdata1, pch=1, cex=0.7,xlab= "u1", col.main="blue", col.lab="red", ylab= "u2",main=expression(paste("Gaussian copula, ",rho,"=0.3")), font.main=1,xaxs="i", yaxs="i", xlim=c(0, 1),ylim=c(0, 1))
# uniform data
data(worldindices)
u=worldindices
u=worldindices
u=worldindices
u=worldindices
rm(worldindices)
cor(u[,1:3],method = c("kendall"))
u2u3u1=cbind(u[,2],u[,3],u[,1])
# uniform data
data(worldindices)
u=worldindices
rm(worldindices)
cor(u[,1:3],method = c("kendall"))
u2u3u1=cbind(u[,2],u[,3],u[,1])
vinemodel=CDVineCopSelect(u2u3u1,type=2,familyset=c(1:10,13,14,23,24))
vinemodel
N=2000
u2u3u1_sim=CDVineSim(N, family=vinemodel$family, vinemodel$par,  vinemodel$par2, type=2)
cor(u2u3u1_sim,method = c("kendall"))
cor(u2u3u1,method = c("kendall"))
vinemodel_sim=CDVineCopSelect(u2u3u1_sim,type=2,familyset=c(1:10,13,14,23,24))
vinemodel_sim
# Vine selection "manually"
model_1 = BiCopSelect(u[,2],u[,3],familyset=c(1:10,13,14,16,23,24,26))
model_1
model_2 = BiCopSelect(u[,1],u[,3],familyset=c(1:10,13,14,16,23,24,26))
model_2
h1 = BiCopHfunc(u[,2],u[,3],model_1$family,model_1$par,model_1$par2)
h2 = BiCopHfunc(u[,1],u[,3],model_2$family,model_2$par)
model_3 = BiCopSelect(h1$hfunc2,h2$hfunc2,familyset=c(1:10,13,14,16,23,24,26))
N=10000
u_sim=CDVineSim(N, family=model$family, model$par,  model$par2, type=2)
cor(u_sim,method = c("kendall"))
model_sim=CDVineCopSelect(u_sim,type=2,familyset=c(1:10,13,14,23,24))
# Inverse CDF Skewed T distribution
param=coef(model)
z1 <- qnorm(u[,1], mean = 0, sd = 1)
sigmat <- model@h.t[length(model@h.t)]
rest<-res[length(res)]
sigma_tplus1 <- param[5] + param[6]*sigmat*rest^2 + param1[6]*sigmat
epsilon <- sqrt(sigma_tplus1)*z1
x2_t <- matrix(0, nrow = N, ncol = 1)
x2_lag <- ret[length(ret)]
